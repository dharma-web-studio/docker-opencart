<?xml version="1.0"?>
<ruleset name="OpenCart">
    <description>A custom coding standard for OpenCart extensions.</description>
    <exclude-pattern>*/bin/*</exclude-pattern>
    <exclude-pattern>*/tests/*</exclude-pattern>
    <config name="installed_paths" value="/var/www/storage/vendor/object-calisthenics/phpcs-calisthenics-rules/src/ObjectCalisthenics"/>

    <!-- Only X indentation level per function/method (with default values) -->
    <rule ref="ObjectCalisthenics.Metrics.MaxNestingLevel">
        <properties>
            <!-- goal is 2 -->
            <property name="maxNestingLevel" value="2"/>
        </properties>
    </rule>

    <!-- There is no "else" -->
    <rule ref="ObjectCalisthenics.ControlStructures.NoElse"/>

    <!-- Only one object operator (->) per line (with default values) -->
    <rule ref="ObjectCalisthenics.CodeAnalysis.OneObjectOperatorPerLine">
        <properties>
            <property name="variablesHoldingAFluentInterface" type="array" value="$queryBuilder,$containerBuilder"/>
            <property name="methodsStartingAFluentInterface" type="array" value="createQueryBuilder"/>
            <property name="methodsEndingAFluentInterface" type="array" value="execute,getQuery"/>
        </properties>
    </rule>

    <!-- Do not abbreviate (with default values) -->
    <rule ref="ObjectCalisthenics.NamingConventions.ElementNameMinimalLength">
        <properties>
            <property name="minLength" value="3"/>
            <property name="allowedShortNames" type="array" value="i,id,to,up"/>
        </properties>
    </rule>

    <!-- Keep classes small (with default values) -->
    <rule ref="ObjectCalisthenics.Files.ClassTraitAndInterfaceLength">
        <properties>
            <property name="maxLength" value="1000"/>
        </properties>
    </rule>
    <rule ref="ObjectCalisthenics.Files.FunctionLength">
        <properties>
            <property name="maxLength" value="550"/>
        </properties>
    </rule>
    <rule ref="ObjectCalisthenics.Metrics.PropertyPerClassLimit">
        <properties>
            <property name="maxCount" value="10"/>
        </properties>
    </rule>
    <rule ref="ObjectCalisthenics.Metrics.MethodPerClassLimit">
        <properties>
            <property name="maxCount" value="80"/>
        </properties>
    </rule>

    <!-- Do not Use Getters and Setters -->
    <rule ref="ObjectCalisthenics.Classes.ForbiddenPublicProperty"/>
    <rule ref="ObjectCalisthenics.NamingConventions.NoSetter"/>

    <!-- Closing PHP tags are not allowed -->
    <rule ref="Zend.Files.ClosingTag">
        <severity>5</severity>
        <type>error</type>
    </rule>

    <!-- Test the blank spaces in inline declarations -->
    <rule ref="Squiz.ControlStructures.InlineIfDeclaration" />

    <!-- Check for whitespace after lines of code and checks for spaces/indents on empty lines -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <severity>1</severity>
        <type>warning</type>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile" />
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile" />
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines" />

    <!-- Check to ensure no PHP deprecated functions have been used -->
    <rule ref="Generic.PHP.DeprecatedFunctions">
        <severity>5</severity>
        <type>error</type>
    </rule>

    <!-- PHP opening tag must be full <?php, no shorthand -->
    <rule ref="Generic.PHP.DisallowShortOpenTag">
        <severity>5</severity>
        <type>error</type>
    </rule>

    <!-- In PHP files make sure there is no character before the opening tag -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>

    <!-- true, false, null etc should all be lowercase only -->
    <rule ref="Generic.PHP.LowerCaseConstant" />

    <!-- Type casting should be immediately followed by the variable, no space -->
    <rule ref="Generic.Formatting.NoSpaceAfterCast" />

    <!-- Pass by reference is now only supported in the method/function params -->
    <rule ref="Generic.Functions.CallTimePassByReference" />

    <!-- Keep the spacing between function/method params space after comma -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing" />

    <!-- Method names should always be camel case -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>

    <!-- Constants should always be uppercase -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- Detect BOMs to avoid curruptions -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- To do comments should be reported -->
    <rule ref="Generic.Commenting.Todo.CommentFound"/>

    <!-- Fix me comments should be reported -->
    <rule ref="Generic.Commenting.Fixme.CommentFound"/>

    <!-- Check that line endings are only \n -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- Check that line endings are only \n -->
    <rule ref="Generic.WhiteSpace.DisallowSpaceIndent">
        <exclude-pattern>*.twig</exclude-pattern>
        <exclude-pattern>*.css</exclude-pattern>
        <exclude-pattern>*.html</exclude-pattern>
        <exclude-pattern>*.ini</exclude-pattern>
        <exclude-pattern>*.txt</exclude-pattern>
        <severity>1</severity>
        <type>warning</type>
    </rule>

</ruleset>
